{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About","text":"ComposeDialogs <p>A compose framework for modal dialogs.</p>"},{"location":"#features","title":"Features","text":"<p>This library offers you an easily extendible compose framework for modal dialogs and allows to show them as a dialog, bottom sheet or even as full screen dialog.</p> <p>Info</p> <p>All features are splitted into separate modules, just include the modules you want to use!</p>"},{"location":"#screenshots","title":"Screenshots","text":"Info Input Number Date Time Color List Progress Menu Frequency"},{"location":"#supported-platforms","title":"Supported Platforms","text":"<p>This is a KMP (kotlin multiplatform) library and the provided modules do support following platforms.</p> Module android ios windows wasm Info Core <code>core</code>                    \u2714                                     \u2714                                     \u2714                                     \u2714                  Modules <code>dialog-billing</code>                    \u2714                                     -                                     -                                     -                                 only exists for android as it is based on googles billing library              <code>dialog-color</code>                    \u2714                                     \u2714                                     \u2714                                     \u2714                  <code>dialog-date</code>                    \u2714                                     \u2714                                     \u2714                                     \u2714                  <code>dialog-info</code>                    \u2714                                     \u2714                                     \u2714                                     \u2714                  <code>dialog-input</code>                    \u2714                                     \u2714                                     \u2714                                     \u2714                  <code>dialog-list</code>                    \u2714                                     \u2714                                     \u2714                                     \u2714                  <code>dialog-menu</code>                    \u2714                                     \u2714                                     \u2714                                     \u2714                  <code>dialog-number</code>                    \u2714                                     \u2714                                     \u2714                                     \u2714                  <code>dialog-progress</code>                    \u2714                                     \u2714                                     \u2714                                     \u2714                  <code>dialog-time</code>                    \u2714                                     \u2714                                     \u2714                                     \u2714                  <code>dialog-frequency</code>                    \u2714                                     \u2714                                     \u2714                                     \u2714"},{"location":"#demo","title":"Demo","text":"<p>A full demo is included inside the demo module, it shows nearly every usage with working examples.</p>"},{"location":"compatibility/","title":"Compatibility","text":"<p>Information about the compatibility of this library with all my other libraries can be found here.</p>"},{"location":"dependencies/","title":"Dependencies","text":""},{"location":"dependencies/#compose","title":"Compose","text":"Dependency Version Infos Jetbrains Compose Multiplatform <code>1.8.2</code> Depends on jetpack (androidx) compose <code>1.8.2</code> Jetbrains Material 3 <code>1.8.2</code> Depends on jetpack (androidx) material3 <code>1.3.2</code> <p>More details about the jetpack dependencies can be found in JetBrains Release Notes.</p> <p>Warning</p> <p>I try to use as few experimental APIs as possible, but this library does use a few experimental APIs which are still marked as experimental. I will provide new versions as soon as possible if experimental APIs change or become stable.</p>"},{"location":"dependencies/#modules","title":"Modules","text":"Module Dependency Version Core <code>core</code> Compose Unstyled (core) <code>1.36.1</code> Modules <code>dialog-billing</code> KotBilling <code>2.0.0</code> <code>dialog-color</code> - <code>dialog-date</code> - <code>dialog-info</code> - <code>dialog-input</code> - <code>dialog-list</code> - <code>dialog-menu</code> - <code>dialog-number</code> - <code>dialog-progress</code> - <code>dialog-time</code> - <code>dialog-frequency</code> -"},{"location":"me/","title":"About Me","text":""},{"location":"me/#about-me","title":"About Me","text":"<p>Check out my main homepage to get an impression of what I do and my open source libraries, android apps and garmin watchfaces that I've developed.</p> <p>https://mflisar.github.io/</p>"},{"location":"other-libraries/","title":"Other Libraries","text":""},{"location":"other-libraries/#other-libraries","title":"Other Libraries","text":"<p>Here you can find an overview of my main libraries that do all play well together including some short descriptions.</p> Utilities Library Description CacheFileProvider This is a minimal library with a few lines of code and without dependencies that offers a simple file provider (simple read only access for sharing files with other apps). FeedbackManager This is a very small library that allows you to send feedback from an app without internet permission via email, either directly or via an unintrusive notification. Libraries Library Description KotBilling A kotlin coroutine based solution for handling in app purchases for billing library version 7. KotPreferences With this library you can declare preferences via kotlin delegates and observe and update them via kotlin flows. This works with any storage implementation, an implementation for JetPack DataStore is provided already. Lumberjack This is a full logging library with a build in way to log to console, file or any custom place as well as optional extensions to send a log file via mail or show it on the device. Compose Image Library Description ComposeChangelog This library offers you a a changelog dialog for compose including the ability to show new logs on app start only as well as filtering and customisation. ComposeColors A simple collection of colors that can be used inside any KMP compose project. ComposeDebugDrawer This library offers you a simple and easily extendable debug drawer. ComposePreferences This library offers you preference screens for compose including the ability of endless nesting subscreens as well as simple integration of custom preferences. ComposeThemer This is a full compose theme engine that handles applying a theme as well as updating the system ui elements. Extendible and allows to simply apply user selected themes inside your app. Unofficial Projects Library Description kmp-parcelize a kmp parcelize library that allows you to use the `@Parcelize` annotation in your kmp projects kmp-library a collection of gradle plugins for my demo projects as well as for my own apps kmp-democomposables a collection of composables that I use for my demo projects Toolbox My personal toolbox library"},{"location":"setup/","title":"Setup","text":"<p>This library is distributed via maven central.</p> <p>Add dependencies like following to use this library inside your project.</p> DependenciesVersion Catalog <p>Simply add the dependencies inside your <code>build.gradle.kts</code> file.</p> build.gradle.kts<pre><code>val composedialogs = \"&lt;LATEST-VERSION&gt;\"\n\n// core\nimplementation(\"io.github.mflisar.composedialogs:core:$composedialogs\")\n\n// modules\nimplementation(\"io.github.mflisar.composedialogs:dialog-billing:$composedialogs\")\nimplementation(\"io.github.mflisar.composedialogs:dialog-color:$composedialogs\")\nimplementation(\"io.github.mflisar.composedialogs:dialog-date:$composedialogs\")\nimplementation(\"io.github.mflisar.composedialogs:dialog-info:$composedialogs\")\nimplementation(\"io.github.mflisar.composedialogs:dialog-input:$composedialogs\")\nimplementation(\"io.github.mflisar.composedialogs:dialog-list:$composedialogs\")\nimplementation(\"io.github.mflisar.composedialogs:dialog-menu:$composedialogs\")\nimplementation(\"io.github.mflisar.composedialogs:dialog-number:$composedialogs\")\nimplementation(\"io.github.mflisar.composedialogs:dialog-progress:$composedialogs\")\nimplementation(\"io.github.mflisar.composedialogs:dialog-time:$composedialogs\")\nimplementation(\"io.github.mflisar.composedialogs:dialog-frequency:$composedialogs\")\n</code></pre> <p>Define the dependencies inside your <code>libs.versions.toml</code> file.</p> libs.versions.toml<pre><code>[versions]\n\ncomposedialogs = \"&lt;LATEST-VERSION&gt;\"\n\n[libraries]\n\n# core\ncomposedialogs-core = { module = \"io.github.mflisar.composedialogs:core\", version.ref = \"composedialogs\" }\n\n# modules\ncomposedialogs-dialog-billing = { module = \"io.github.mflisar.composedialogs:dialog-billing\", version.ref = \"composedialogs\" }\ncomposedialogs-dialog-color = { module = \"io.github.mflisar.composedialogs:dialog-color\", version.ref = \"composedialogs\" }\ncomposedialogs-dialog-date = { module = \"io.github.mflisar.composedialogs:dialog-date\", version.ref = \"composedialogs\" }\ncomposedialogs-dialog-info = { module = \"io.github.mflisar.composedialogs:dialog-info\", version.ref = \"composedialogs\" }\ncomposedialogs-dialog-input = { module = \"io.github.mflisar.composedialogs:dialog-input\", version.ref = \"composedialogs\" }\ncomposedialogs-dialog-list = { module = \"io.github.mflisar.composedialogs:dialog-list\", version.ref = \"composedialogs\" }\ncomposedialogs-dialog-menu = { module = \"io.github.mflisar.composedialogs:dialog-menu\", version.ref = \"composedialogs\" }\ncomposedialogs-dialog-number = { module = \"io.github.mflisar.composedialogs:dialog-number\", version.ref = \"composedialogs\" }\ncomposedialogs-dialog-progress = { module = \"io.github.mflisar.composedialogs:dialog-progress\", version.ref = \"composedialogs\" }\ncomposedialogs-dialog-time = { module = \"io.github.mflisar.composedialogs:dialog-time\", version.ref = \"composedialogs\" }\ncomposedialogs-dialog-frequency = { module = \"io.github.mflisar.composedialogs:dialog-frequency\", version.ref = \"composedialogs\" }\n</code></pre> <p>And then use the definitions in your projects like following:</p> build.gradle.kts<pre><code># core\nimplementation(libs.composedialogs.core)\n\n# modules\nimplementation(libs.composedialogs.dialog.billing)\nimplementation(libs.composedialogs.dialog.color)\nimplementation(libs.composedialogs.dialog.date)\nimplementation(libs.composedialogs.dialog.info)\nimplementation(libs.composedialogs.dialog.input)\nimplementation(libs.composedialogs.dialog.list)\nimplementation(libs.composedialogs.dialog.menu)\nimplementation(libs.composedialogs.dialog.number)\nimplementation(libs.composedialogs.dialog.progress)\nimplementation(libs.composedialogs.dialog.time)\nimplementation(libs.composedialogs.dialog.frequency)\n</code></pre>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#basic-examples","title":"Basic examples","text":"<pre><code>// create and remember a state\nval state = rememberDialogState()\n\n// Create a dialog composable\nif (state.visible) {\n    DialogInfo(\n        state = state,\n        info = \"Some \"\n    )\n}\n\n// show the dialog inside a button press event or similar\nButton(onClick = { state.show() }) {\n    Text(\"Show Dialog\")\n}\n</code></pre> <p>Alternatively you can hold any <code>saveable</code> state inside dialog state. If the dialog state holds any data, it will consider itself as visible.</p> <pre><code>// create and remember a state (e.g. selected list index as in this example)\nval state = rememberDialogState&lt;Int&gt;(data = null)\n\n// show a dialog if necessary\nif (state.showing)\n{\n    val data = state.requireData() // in this example the data is the list index\n    DialogInfo(\n        state = state,\n        info = \"Data = $data\"\n    )\n}\n\n// a list that uses the dialog\nval items = 1..100\nLazyColumn {\n    items.forEach {\n        item(key = it) {\n            Button(onClick = { state.show(it) }) {\n                Text(\"Item $it\")\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"usage/#stylingcustomisation-and-events","title":"Styling/Customisation and events","text":"<p>All dialog (also custom ones) do support styling like:</p> <ul> <li>optional icon (including style like <code>CenterTop</code> and <code>Begin</code>)</li> <li>dialog style (dialog, bottom sheet, fullscreen)</li> <li>custom buttons (zero, one or two) with custom texts</li> <li>a options variable to set up features like <code>dismissOnButtonClick</code>, <code>dismissOnBackPress</code> and <code>dismissOnClickOutside</code></li> <li>an event callback for the close event and button click event</li> </ul> <p>Check out the advanced region on the side for more details.</p>"},{"location":"usage/#dialogs","title":"Dialogs","text":"<p>Check out all the modules to find out more about the available implementations.</p>"},{"location":"advanced/buttons/","title":"Buttons","text":"<p>Every dialog supports up to 2 integrated buttons. Whenever you show a dialog you can decide which buttons you need.</p> <p><code>DialogDefaults</code> does offer the corresponding functions to create buttons.</p> <pre><code>val buttons1 = DialogDefaults.buttons(\n    positive: DialogButton = DialogButton(\"Save\"),\n    negative: DialogButton = DialogButton(\"Cancel\")\n)\n\nval noButtons = DialogDefaults.buttonsDisabled()\n</code></pre> <p>Buttons with an empty string will always be considered as disabled (they won't be rendered at all).</p>"},{"location":"advanced/custom-dialog/","title":"Custom Dialog","text":"<p>In general a custom dialog is made as simple as following (info dialog is exactly the following):</p> <pre><code>/**\n * Shows a dialog with an info text and an optional label for that info\n *\n * &amp;nbsp;\n *\n * **Basic Parameters:** all params not described here are derived from [Dialog], check it out for more details\n *\n * @param info the information text for this dialog\n * @param infoLabel the optional label for the information text\n */\n@Composable\nfun DialogInfo(\n    state: DialogState,\n    // Custom - Required\n    info: String,\n    // Custom - Optional\n    infoLabel: String = \"\",\n    // Base Dialog - Optional\n    title: (@Composable () -&gt; Unit)? = null,\n    icon: (@Composable () -&gt; Unit)? = null,\n    style: ComposeDialogStyle = DialogDefaults.defaultDialogStyle(),\n    buttons: DialogButtons = DialogDefaults.buttons(),\n    options: DialogOptions = DialogDefaults.options(),\n    onEvent: (event: DialogEvent) -&gt; Unit = {}\n)\n{\n    Dialog(state, title, icon, style, buttons, options, onEvent = onEvent) {\n        Column {\n            if (infoLabel.isNotEmpty()) {\n                Text(modifier = Modifier.padding(bottom = 8.dp), text = infoLabel, style = MaterialTheme.typography.titleSmall)\n            }\n            Text(text = info)\n        }\n    }\n}\n</code></pre> <p>So in the end following is the base structure for a new dialog:</p> <pre><code>@Composable\nfun DialogInfo(\n    state: DialogState,\n    // Custom\n    // custom data for you custom dialog\n    // ....\n    // Base Dialog - Optional\n    title: (@Composable () -&gt; Unit)? = null,\n    icon: (@Composable () -&gt; Unit)? = null,\n    style: ComposeDialogStyle = DialogDefaults.defaultDialogStyle(),\n    buttons: DialogButtons = DialogDefaults.buttons(),\n    options: Options = Options(),\n    onEvent: (event: DialogEvent) -&gt; Unit = {}\n) {\n    Dialog(state, title, icon, style, buttons, options, onEvent = onEvent) {\n        Column {\n            // custom content - whatever you want\n        }\n    }\n}\n</code></pre> <p>This dialog will automatically support all the features of this library.</p>"},{"location":"advanced/custom-dialog/#important-note","title":"Important note","text":"<p>Sometimes you want show some scrollable content inside a dialog and don't want this content to stretch the dialog height in case, that the content does not show a lot of data. You can use following function from the core module in this case.</p> <p>Both function will take care to show scrollbars if necessary and will not stretch the dialog height if the content inside it is small.</p> <pre><code>Dialog(state, title, icon, style, buttons, options, onEvent = onEvent) {\n\n    // non lazy\n    DialogContentScrollableColumn { \n\n    }\n\n    // or lazy\n    DialogContentScrollableLazyColumn { \n\n    }\n}\n</code></pre>"},{"location":"advanced/events/","title":"Events","text":"<p>Every dialog offers an <code>onEvent</code> callback. You can handle the dialog events inside there like e.g. if dialog was closed or if a dialog button was clicked.</p> <pre><code>DialogInfo(\n    state = state,\n    info = \"some info\",\n    onEvent = {\n\n        // Variant 1\n        when (event) {\n            is DialogEvent.Button -&gt; {\n                if (event.button == DialogButtonType.Positive) {\n                    // positive button was pressed\n                } else {\n                    // negatvie button was pressed\n                }\n            }\n            is DialogEvent.Dismissed -&gt; {\n                // dialog was dismissed by click outside or back press\n            }\n        }\n\n        // Variant 2\n        // many times you only want to handle the positive button click\n        if (event.isPositiveButton) {\n            // positive button was pressed\n        }\n    }\n)\n</code></pre>"},{"location":"advanced/styles/","title":"Styles","text":"<p>This library offers 3 styles (actually 4) for dialog. You can always provide the style to a dialog composable and customise it however you want.</p> <p><code>DialogDefaults</code> does offer the corresponding functions to create a style.</p> Dialog StyleBottom Sheet StyleFull Screen Dialog StyleDesktop Dialog Style <pre><code>/**\n * the setup of a dialog that shows as a normal dialog popup\n *\n * @param swipeDismissable if true, the dialog can be swiped away by an up/down swipe\n * @param dismissOnBackPress if true, the dialog can be dismissed by a back press\n * @param dismissOnClickOutside if true, the dialog can be dismissed by clicking outside of its borders\n * @param scrim if true, the dialog will a show a scrim behind it\n * @param options provides custom style options of the dialog\n * @param shape the [Shape] of the dialog\n * @param containerColor the [Color] of the container\n * @param iconColor the content [Color] of the icon\n * @param titleColor the content [Color] of the title\n * @param contentColor the content [Color] of the text\n */\n@Composable\nfun styleDialog(\n    swipeDismissable: Boolean = false,\n    // DialogProperties\n    dismissOnBackPress: Boolean = true,\n    dismissOnClickOutside: Boolean = true,\n    scrim: Boolean = true,\n    // Style\n    options: StyleOptions = StyleOptions(),\n    shape: Shape = DialogStyleDefaults.shape,\n    containerColor: Color = DialogStyleDefaults.containerColor,\n    iconColor: Color = DialogStyleDefaults.iconColor,\n    titleColor: Color = DialogStyleDefaults.titleColor,\n    contentColor: Color = DialogStyleDefaults.contentColor\n): ComposeDialogStyle\n</code></pre> <pre><code>/**\n * the setup of a dialog that shows as a normal dialog popup\n *\n * @param dragHandle if true, a drag handle will be shown\n * @param peekHeight the peek height calculation of the bottom sheet\n * @param expandInitially if true, the bottom sheet is initially displayed in expanded state (even if it has a peek height)\n * @param velocityThreshold the velocity threshold of the bottom sheet\n * @param positionalThreshold the positional threshold of the bottom sheet\n * @param animateShow if true, the sheet will be animated on first show\n * @param dismissOnBackPress if true, the dialog can be dismissed by a back press\n * @param dismissOnClickOutside if true, the dialog can be dismissed by clicking outside of its borders\n * @param scrim if true, the dialog will a show a scrim behind it\n * @param options provides custom style options of the dialog\n * @param shape the [Shape] of the dialog\n * @param containerColor the [Color] of the container\n * @param iconColor the content [Color] of the icon\n * @param titleColor the content [Color] of the title\n * @param contentColor the content [Color] of the text\n */\n@Composable\nfun styleBottomSheet(\n    dragHandle: Boolean = true,\n    peekHeight: ((containerHeight: Dp, sheetHeight: Dp) -&gt; Dp)? = BottomSheetStyleDefaults.peekHeight,\n    expandInitially: Boolean = false,\n    velocityThreshold: () -&gt; Dp = { 125.dp },\n    positionalThreshold: (totalDistance: Dp) -&gt; Dp = { 56.dp },\n    animateShow: Boolean = false,\n    // DialogProperties\n    dismissOnBackPress: Boolean = true,\n    dismissOnClickOutside: Boolean = true,\n    scrim: Boolean = true,\n    // Style\n    options: StyleOptions = StyleOptions(),\n    shape: Shape = BottomSheetStyleDefaults.shape,\n    containerColor: Color = BottomSheetStyleDefaults.containerColor,\n    iconColor: Color = BottomSheetStyleDefaults.iconColor,\n    titleColor: Color = BottomSheetStyleDefaults.titleColor,\n    contentColor: Color = BottomSheetStyleDefaults.contentColor\n): ComposeDialogStyle\n</code></pre> <pre><code>/**\n * the setup of a dialog that shows as a normal dialog popup\n *\n * @param darkStatusBar if true, the dialog icons will be adjusted to a dark status bar\n * @param menuActions if provided, it replaces the the default close menu action\n * @param dismissOnBackPress if true, the dialog can be dismissed by a back press\n * @param toolbarColor the [Color] of the toolbar\n * @param toolbarActionColor the [Color] of the actions in the toolbar\n * @param containerColor the [Color] of the container\n * @param iconColor the content [Color] of the icon\n * @param titleColor the content [Color] of the title\n * @param contentColor the content [Color]\n * @param navigationIcon provides the navigation icon - a close icon by default but you can provide a custom one here (that toggles between close and back arrow depending on your custom logic)\n * @param applyContentPadding if true, the content padding will be applied\n */\n@Composable\nfun styleFullscreenDialog(\n    darkStatusBar: Boolean = false,\n    menuActions: @Composable (RowScope.() -&gt; Unit)? = null,\n    // DialogProperties\n    dismissOnBackPress: Boolean = true,\n    // Style\n    toolbarColor: Color = FullscreenDialogStyleDefaults.toolbarColor,\n    toolbarActionColor: Color = FullscreenDialogStyleDefaults.toolbarActionColor,\n    containerColor: Color = FullscreenDialogStyleDefaults.containerColor,\n    iconColor: Color = FullscreenDialogStyleDefaults.iconColor,\n    titleColor: Color = FullscreenDialogStyleDefaults.titleColor,\n    contentColor: Color = FullscreenDialogStyleDefaults.contentColor,\n    // added in 3.0.1\n    navigationIcon: (@Composable () -&gt; Unit)? = null,\n    applyContentPadding: Boolean = true\n): ComposeDialogStyle\n</code></pre> <p>On windows you can also use a windows window based dialog style.</p> <pre><code>@Composable\nfun DialogDefaults.styleWindowsDialog(\n    dialogTitle: String,\n    position: WindowPosition = WindowPosition(Alignment.Center),\n    width: Dp = 800.dp,\n    height: Dp = 600.dp,\n    // Style\n    iconColor: Color = DialogStyleDefaults.iconColor,\n    titleColor: Color = DialogStyleDefaults.titleColor,\n    contentColor: Color = DialogStyleDefaults.contentColor\n): ComposeDialogStyle\n</code></pre>"},{"location":"migration/v2/","title":"v2","text":"<p>Info</p> <p>Version <code>2.*</code> is a kotlin multiplatform rewrite, that's why some fundamantal changes needed to be done!</p>"},{"location":"migration/v2/#changed-imports","title":"Changed imports","text":"<ul> <li><code>com.michaelflisar.composedialogs.core.style.DialogStyle</code> =&gt; <code>import com.michaelflisar.composedialogs.core.styles.ComposeDialogStyle</code></li> <li><code>com.michaelflisar.composedialogs.core.style</code> =&gt; <code>com.michaelflisar.composedialogs.core.styles</code> (s added)</li> <li>Fixed wrong package names for all number dialog classes (input was renamed to number):</li> <li><code>com.michaelflisar.composedialogs.dialogs.number.DialogNumberPicker</code></li> <li><code>com.michaelflisar.composedialogs.dialogs.number.NumberPickerSetup</code></li> <li><code>com.michaelflisar.composedialogs.dialogs.number.RepeatingButton</code></li> <li><code>com.michaelflisar.composedialogs.dialogs.number.rememberDialogNumber</code></li> </ul>"},{"location":"migration/v2/#structural-changes","title":"Structural changes","text":"<p>DialogState</p> <ul> <li>class <code>DialogState</code> was renemad to <code>DialogStateNoData</code> </li> <li><code>DialogState</code> is a now base class of <code>DialogstateNoData</code> and <code>DialogStateWithData</code></li> <li>the show function is save now =&gt; <code>show(data)</code> can only be called from <code>DialogStateWithData</code> and <code>show()</code> only from <code>DialogStateNoData</code></li> <li>the <code>showing</code> flag was renemad to <code>visible</code> (that name is more common in googles composables)</li> </ul>"},{"location":"migration/v2/#note","title":"Note","text":"<p>I probably forgot some small changes because this was a big rewrite in KMP. Let me know if you find something then I'll add it here.</p>"},{"location":"modules/core/","title":"core","text":"<p>This is the core module. It holds all common classes necessary for all dialog modules and also necessary for any custom dialog.</p> <p>Usage of this module is already described in the usage region.</p>"},{"location":"modules/dialog-billing/","title":"dialog-billing","text":"<p>Info</p> <p>This extension does only support android!</p> <p>This shows a dialog with the prices and names of your products. It also shows if a product is already owned and allows to buy unowned products by clicking them.</p> <pre><code>/**\n * Shows a dialog with prices of purchaseable products =&gt; clicking an item will launch the buy process\n *\n * &amp;nbsp;\n *\n * **Basic Parameters:** all params not described here are derived from [Dialog], check it out for more details\n *\n * @param products the products to show inside the list\n * @param texts localised texts for this dialog\n */\n@Composable\nfun DialogBilling(\n    state: DialogState,\n    // custom settings\n    products: List&lt;DialogBilling.BillingProduct&gt;,\n    texts: DialogBilling.Texts = DialogBillingDefaults.texts(),\n    // Base Dialog - Optional\n    title: (@Composable () -&gt; Unit)? = null,\n    icon: (@Composable () -&gt; Unit)? = null,\n    style: ComposeDialogStyle = DialogDefaults.defaultDialogStyle(),\n    //buttons: DialogButtons = DialogDefaults.buttons(),\n    onEvent: (event: DialogEvent) -&gt; Unit = {}\n)\n</code></pre>"},{"location":"modules/dialog-color/","title":"dialog-color","text":"<p>This shows a color selector dialog. A table with predefined material colors as well as a customisation page will be shown. Alpha support can be enabled optionally.</p> <p>Check out the composable and it's documentation in the code snipplet below.</p> <p>Generally following can be adjusted:</p> <ul> <li>alpha support yes/no</li> <li>shape of a color composable inside the color grid (rect, rounded rect, circle, ...)</li> <li>the number of columns in the color grid</li> <li>the style of how RGB(A) values are displayed (either as a number in the range of [0, 255] or as a percentage value [0%, 100%])</li> </ul>"},{"location":"modules/dialog-color/#example","title":"Example","text":"<pre><code>if (state.visible) {\n    val color = rememberDialogColor(Color.Blue.copy(alpha = .5f))\n    DialogColor(\n        state = state,\n        color = color,\n        alphaSupported = true,\n        icon = icon,\n        title = { Text(\"Color Dialog\") },\n        style = style,\n        onEvent = {\n            if (it is DialogEvent.Button &amp;&amp; it.button == DialogButtonType.Positive) {\n                val hex = color.value.toArgb().toUInt().toString(16).padStart(8, '0')\n                showInfo(\"Selected color: #$hex\")\n            } else {\n                showInfo(\"Event $it\")\n            }\n        }\n    )\n}\n</code></pre>"},{"location":"modules/dialog-color/#composable","title":"Composable","text":"<pre><code>/**\n * Shows a color dialog\n *\n * &amp;nbsp;\n *\n * **Basic Parameters:** all params not described here are derived from [Dialog], check it out for more details\n *\n * @param color the selected color state\n * @param texts the texts ([DialogColor.Texts]) that are used inside this dialog - use [DialogColorDefaults.texts] to provide your own data\n * @param alphaSupported if true, the dialog supports color alpha values\n * @param shape the shape of the color cells\n * @param gridSize the size of the color grid\n * @param labelStyle the [DialogColor.LabelStyle] for the color picker\n */\n@OptIn(ExperimentalComposeUiApi::class)\n@Composable\nfun DialogColor(\n    // Base Dialog - State\n    state: DialogState,\n    // Custom - Required\n    color: MutableState&lt;Color&gt;,\n    // Custom - Optional\n    texts: DialogColor.Texts = DialogColorDefaults.texts(),\n    alphaSupported: Boolean = true,\n    shape: Shape = MaterialTheme.shapes.small,\n    gridSize: Int = if (isLandscape()) 6 else 4,\n    labelStyle: DialogColor.LabelStyle = DialogColor.LabelStyle.Value,\n    // Base Dialog - Optional\n    title: (@Composable () -&gt; Unit)? = null,\n    icon: (@Composable () -&gt; Unit)? = null,\n    style: ComposeDialogStyle = DialogDefaults.defaultDialogStyle(),\n    buttons: DialogButtons = DialogDefaults.buttons(),\n    options: DialogOptions = DialogDefaults.options(),\n    onEvent: (event: DialogEvent) -&gt; Unit = {}\n)\n</code></pre>"},{"location":"modules/dialog-color/#screenshots","title":"Screenshots","text":""},{"location":"modules/dialog-date/","title":"dialog-date","text":"<p>This shows a date selector dialog. First day of week, labels, and style can be adjusted to your needs.</p> <p>Check out the composable and it's documentation in the code snipplet below.</p> <p>Generally following can be adjusted:</p> <ul> <li>custom texts</li> <li>custom first day of week</li> <li>cel height of the calendar</li> <li>optional next/previous month buttons</li> </ul>"},{"location":"modules/dialog-date/#example","title":"Example","text":"<pre><code>if (state.visible) {\n\n    // special state for date dialog\n    val date = rememberDialogDate()\n    // optional settings\n    var setup = DialogDateDefaults.setup(\n        dateCellHeight = 32.dp\n    )\n    if (customSetup) {\n        setup = DialogDateDefaults.setup(\n            buttonToday = { enabled, onClick -&gt;\n                FilledIconButton(onClick = onClick, enabled = enabled) {\n                    Icon(Icons.Default.Today, null)\n                }\n            },\n            firstDayOfWeek = DayOfWeek.SUNDAY,\n            dateCellHeight = 32.dp,\n            showNextPreviousMonthButtons = false,\n            showNextPreviousYearButtons = false,\n            // formats are just defined as they are already by default, but you\n            // see how you could simply change them...\n            formatterWeekDayLabel = { defaultFormatterWeekDayLabel(it) },\n            formatterSelectedDate = {\n                defaultFormatterSelectedDate(it)\n            },\n            formatterSelectedMonth = {\n                defaultFormatterSelectedMonth(it)\n            },\n            formatterSelectedYear = { it.toString() },\n            formatterMonthSelectorList = {\n                defaultFormatterSelectedMonthInSelectorList(it)\n            },\n            formatterYearSelectorList = { it.toString() }\n        )\n    }\n    val dateRange = DialogDateDefaults.dateRange()\n\n    DialogDate(\n        state = state,\n        date = date,\n        setup = setup,\n        dateRange = dateRange,\n        icon = icon,\n        title = { Text(\"Select Date\") },\n        style = style,\n        onEvent = {\n            if (it is DialogEvent.Button &amp;&amp; it.button == DialogButtonType.Positive) {\n                showInfo(\"Selected Date: ${date.value}\")\n            } else {\n                showInfo(\"Event $it\")\n            }\n        }\n    )\n}\n</code></pre>"},{"location":"modules/dialog-date/#composable","title":"Composable","text":"<pre><code>/**\n * Shows a dialog with an input field\n *\n * &amp;nbsp;\n *\n * **Basic Parameters:** all params not described here are derived from [Dialog], check it out for more details\n *\n * @param date the selected date state\n * @param dateRange the supported [DialogDate.Range] - use [DialogDateDefaults.dateRange] to provide your own data\n * @param setup the [DialogDate.Setup] - use [DialogDateDefaults.setup] to provide your own data\n */\n@OptIn(ExperimentalComposeUiApi::class)\n@Composable\nfun DialogDate(\n    state: DialogState,\n    // Custom - Required\n    date: MutableState&lt;LocalDate&gt;,\n    // Custom - Optional\n    dateRange: DialogDate.Range = DialogDateDefaults.dateRange(),\n    setup: DialogDate.Setup = DialogDateDefaults.setup(),\n    // Base Dialog - Optional\n    title: (@Composable () -&gt; Unit)? = null,\n    icon: (@Composable () -&gt; Unit)? = null,\n    style: ComposeDialogStyle = DialogDefaults.defaultDialogStyle(),\n    buttons: DialogButtons = DialogDefaults.buttons(),\n    options: DialogOptions = DialogDefaults.options(),\n    onEvent: (event: DialogEvent) -&gt; Unit = {}\n)\n</code></pre>"},{"location":"modules/dialog-date/#screenshots","title":"Screenshots","text":""},{"location":"modules/dialog-frequency/","title":"dialog-frequency","text":"<p>This shows a frequency selector dialog. It supports daily, weekly, monthly and yearly frequencies.</p> <p>Check out the composable and it's documentation in the code snipplet below.</p>"},{"location":"modules/dialog-frequency/#example","title":"Example","text":"<pre><code>if (state.visible) {\n    val frequency = rememberDialogFrequency(Frequency.Weekly(DayOfWeek.MONDAY, LocalTime(12, 0), 1))\n    DialogFrequency(\n        state = state,\n        frequency = frequency,\n        title = { Text(\"Frequency\") },\n        icon = icon,\n        style = style,\n        onEvent = { event -&gt;\n            showInfo(\"Event $event | frequency: ${frequency.value}\")\n        }\n    )\n}\n</code></pre>"},{"location":"modules/dialog-frequency/#composable","title":"Composable","text":"<pre><code>/**\n * Shows a frequency dialog\n *\n * &amp;nbsp;\n *\n * **Basic Parameters:** all params not described here are derived from [Dialog], check it out for more details\n *\n * @param frequency the frequency state of the dialog\n * @param texts the texts ([DialogFrequency.Texts]) that are used inside this dialog - use [DialogFrequencyDefaults.texts] to provide your own data\n * @param supportedTypes the supported frequency types - default is all types\n * @param firstDayOffset the first day of the week - default is [DayOfWeek.MONDAY]\n */\n@Composable\nfun DialogFrequency(\n    state: DialogState,\n    // Custom - Required\n    frequency: MutableState&lt;Frequency&gt;,\n    // Custom - Optional\n    texts: DialogFrequency.Texts = DialogFrequencyDefaults.texts(),\n    supportedTypes: List&lt;Frequency.Type&gt; = Frequency.Type.entries,\n    firstDayOffset: DayOfWeek = DayOfWeek.MONDAY,\n    // Base Dialog - Optional\n    title: (@Composable () -&gt; Unit)? = null,\n    icon: (@Composable () -&gt; Unit)? = null,\n    style: ComposeDialogStyle = DialogDefaults.defaultDialogStyle(),\n    buttons: DialogButtons = DialogDefaults.buttons(),\n    options: DialogOptions = DialogDefaults.options(),\n    onEvent: (event: DialogEvent) -&gt; Unit = {}\n)\n</code></pre>"},{"location":"modules/dialog-frequency/#frequency-class","title":"Frequency class","text":"<p>This class offers some helpful functions to calculate the next date based on a given start date.</p> <pre><code>/**\n * Calculates the next occurrence of the event based on the frequency settings.\n *\n * @param from The starting point to calculate the next occurrence from.\n * @param timeZone The time zone to consider for the calculation (defaults to the system's current time zone).\n * @param offset An optional offset to adjust the calculation (default is 0).\n * @return The next occurrence as a LocalDateTime.\n */\n@OptIn(ExperimentalTime::class)\nabstract fun calcNextOccurrence(from: LocalDate, timeZone: TimeZone = TimeZone.currentSystemDefault(), offset: Int = 0): LocalDateTime\n</code></pre> <pre><code>/**\n * Calculates the next [count] occurrences of the event based on the frequency settings.\n *\n * @param from The starting point to calculate the next occurrences from.\n * @param offset An optional offset to adjust the calculation (default is 0).\n * @param count The number of occurrences to calculate.\n * @param timeZone The time zone to consider for the calculation (defaults to the system's current time zone).\n * @return A list of the next occurrences as LocalDateTime objects.\n */\n@OptIn(ExperimentalTime::class)\nfun calcNextOccurrences(from: LocalDate, count: Int, offset: Int = 0, timeZone: TimeZone = TimeZone.currentSystemDefault()): List&lt;LocalDateTime&gt;\n</code></pre> <p>Here's a small example how to use it:</p> <pre><code>val time = LocalTime(12, 0)\nval frequencyDaily1 = Frequency.Daily(time, 1)\nval frequencyWeekly1 = Frequency.Weekly(DayOfWeek.MONDAY, time, 1)\nval frequencyMonthly1 = Frequency.Monthly(31, time, 1)\nval frequencyYearly1 = Frequency.Yearly(Month.JANUARY, 31, time, 1)\n\n// Friday, January 31, 2025\nval date = LocalDate(2025, Month.JANUARY, 31)\n\nval nextDaily1 = frequencyDaily1.calcNextOccurrence(date) // February 1, 2025\nval nextWeekly1 = frequencyWeekly1.calcNextOccurrence(date) // February 3 (next monday after date)\nval nextMonthly1 = frequencyMonthly1.calcNextOccurrence(date) // March 31, 2025 (31st of next month)\nval nextYearly1 = frequencyYearly1.calcNextOccurrence(date) // January 31, 2026 (31st of January next year)\n\n// TIPP: do not use calcNextOccurrence recursively to get multiple occurrences, use calcNextOccurrence(..., offset = n) instead\n// this avoid issues for example with monthly frequencies where the next month does not have the same day (e.g. 31st) and similar!\n\n// you can also get multiple occurrences at once:\nval next3Daily1 = frequencyDaily1.calcNextOccurrences(date, 3) // February 1, 2, 3 of 2025\nval next3Weekly1 = frequencyWeekly1.calcNextOccurrences(date, 3) // February 3, 10, 17 of 2025\nval next3Monthly1 = frequencyMonthly1.calcNextOccurrences(date, 3) // March 31, April 30, May 31 of 2025\nval next3Yearly1 = frequencyYearly1.calcNextOccurrences(date, 3) // January 31 of 2026, 2027, 2028\n\n// TIPP2: calcNextOccurrences does also support an offset parameter\n</code></pre>"},{"location":"modules/dialog-frequency/#screenshots","title":"Screenshots","text":""},{"location":"modules/dialog-info/","title":"dialog-info","text":"<p>This shows a simple dialog with some informational text.</p> <p>Check out the composable and it's documentation in the code snipplet below.</p> <p>Generally following can be adjusted:</p> <ul> <li>an optional label for the information</li> </ul>"},{"location":"modules/dialog-info/#example","title":"Example","text":"<pre><code>if (state.visible) {\n    DialogInfo(\n        state = state,\n        title = { Text(\"Dialog\") },\n        info = \"Simple Info Dialog\",\n        icon = icon,\n        style = style,\n        onEvent = { event -&gt;\n            showInfo(\"Event $event\")\n        }\n    )\n}\n</code></pre>"},{"location":"modules/dialog-info/#composable","title":"Composable","text":"<pre><code>/**\n * Shows a dialog with an info text and an optional label for that info\n *\n * &amp;nbsp;\n *\n * **Basic Parameters:** all params not described here are derived from [Dialog], check it out for more details\n *\n * @param info the information text for this dialog\n * @param infoLabel the optional label for the information text\n */\n@Composable\nfun DialogInfo(\n    state: DialogState,\n    // Custom - Required\n    info: String,\n    // Custom - Optional\n    infoLabel: String = \"\",\n    // Base Dialog - Optional\n    title: (@Composable () -&gt; Unit)? = null,\n    icon: (@Composable () -&gt; Unit)? = null,\n    style: ComposeDialogStyle = DialogDefaults.defaultDialogStyle(),\n    buttons: DialogButtons = DialogDefaults.buttons(),\n    options: DialogOptions = DialogDefaults.options(),\n    onEvent: (event: DialogEvent) -&gt; Unit = {}\n)\n</code></pre>"},{"location":"modules/dialog-info/#screenshots","title":"Screenshots","text":""},{"location":"modules/dialog-input/","title":"dialog-input","text":"<p>This shows a dialog with a <code>InputField</code>. All its parameters are exposed via the compose function as you can see below, which allows you to simply adjust the <code>InputFields</code> behaviour. Additinally you can attach a validator which ensures, that the dialog will only return a valid input and can't be closed otherwise.</p> <p>Check out the composable and it's documentation in the code snipplet below.</p> <p>Generally following can be adjusted:</p> <ul> <li>texts</li> <li>number of lines</li> <li><code>TextField</code> options like number of lines, keyboard options, selection state...</li> <li>an optional <code>DialogInputValidator</code> can be provided</li> </ul>"},{"location":"modules/dialog-input/#example","title":"Example","text":"DialogInputDialogInputNumber <pre><code>if (state.visible) {\n\n    // special state for input dialog\n    val input = rememberDialogInput(text)\n\n    // input dialog\n    DialogInput(\n        state = state,\n        title = { Text(\"Input Dialog\") },\n        value = input,\n        label = \"Text\",\n        icon = icon,\n        style = style,\n        onEvent = {\n            if (it is DialogEvent.Button &amp;&amp; it.button == DialogButtonType.Positive) {\n                // we should probably handle the input value in this case\n                showInfo(\"Submitted Input: ${input.value}\")\n            } else {\n                showInfo(\"Event $it\")\n            }\n        },\n        validator = rememberDialogInputValidator(\n            validate = {\n                if (it.isNotEmpty())\n                    DialogInputValidator.Result.Valid\n                else\n                    DialogInputValidator.Result.Error(\"Empty input is not allowed!\")\n            }\n        ),\n        onTextStateChanged = { valid, _ -&gt;\n            state.enableButton(DialogButtonType.Positive, valid)\n        }\n    )\n}\n</code></pre> <pre><code>// would work with Int, Long, Double and Float (all options of Number!)\nval number = 123\nval state = rememberDialogState()\nif (state.visible) {\n\n    // special state for input dialog\n    val value = rememberDialogInputNumber(number)\n\n    // number dialog\n    DialogInputNumber(\n        state = state,\n        title = { Text(\"Input Integer Dialog\") },\n        value = value,\n        label = \"Integer\",\n        icon = icon,\n        style = style,\n        onEvent = {\n            if (it is DialogEvent.Button &amp;&amp; it.button == DialogButtonType.Positive) {\n                // we should probably handle the input value in this case\n                showInfo(\"Submitted Input: ${value.value}\")\n            } else {\n                showInfo(\"Event $it\")\n            }\n        }\n    )\n}\n</code></pre>"},{"location":"modules/dialog-input/#composable","title":"Composable","text":"<p>There are 2 main composables for this dialog, one for a string and for a numerical input.</p> DialogInputDialogInputNumber <pre><code>/**\n * Shows a dialog with an input field\n *\n * &amp;nbsp;\n *\n * **Basic Parameters:** all params not described here are derived from [Dialog], check it out for more details\n *\n * @param value the selected text\n * @param label the optional label of the input field\n * @param inputPlaceholder the placeholder the for the input field\n * @param singleLine if true, the input field will only allow a single line\n * @param maxLines the max lines for the input field\n * @param minLines the min lines for the input field\n * @param keyboardOptions the [KeyboardOptions] for the input field\n * @param enabled if true, the input field is enabled\n * @param clearable if true, the input field can be cleared by a trailing clear icon\n * @param prefix the prefix for the input field\n * @param suffix the prefix for the input field\n * @param textStyle the [TextStyle] for the input field\n * @param validator the [DialogInputValidator] for the input field - use [rememberDialogInputValidator]\n * @param requestFocus if true, the input field will request the focus when the dialog si shown (and open the keyboard)\n * @param selectionState if initial selection state ([DialogInput.SelectionState]) of the input field\n * @param onTextStateChanged an optional callback that will be called whenever the value of the input field changes\n */\n@Composable\nfun DialogInput(\n    // Base Dialog - State\n    state: DialogState,\n    // Custom - Required\n    value: MutableState&lt;String&gt;,\n    label: String = \"\",\n    // Custom - Optional\n    inputPlaceholder: String = \"\",\n    singleLine: Boolean = false,\n    maxLines: Int = if (singleLine) 1 else Int.MAX_VALUE,\n    minLines: Int = 1,\n    keyboardOptions: KeyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Text),\n    enabled: Boolean = true,\n    clearable: Boolean = true,\n    prefix: String = \"\",\n    suffix: String = \"\",\n    textStyle: TextStyle = LocalTextStyle.current,\n    validator: DialogInputValidator = rememberDialogInputValidator(),\n    requestFocus: Boolean = false,\n    selectionState: DialogInput.SelectionState = DialogInput.SelectionState.Default,\n    onTextStateChanged: (valid: Boolean, text: String) -&gt; Unit = { _, _ -&gt; },\n    // Base Dialog - Optional\n    title: (@Composable () -&gt; Unit)? = null,\n    icon: (@Composable () -&gt; Unit)? = null,\n    style: ComposeDialogStyle = DialogDefaults.defaultDialogStyle(),\n    buttons: DialogButtons = DialogDefaults.buttons(),\n    options: DialogOptions = DialogDefaults.options(),\n    onEvent: (event: DialogEvent) -&gt; Unit = {}\n)\n</code></pre> <pre><code>/**\n * Shows a dialog with an input field that only allows numeric characters and validates that the input holds a valid value for the desired data type\n *\n * &amp;nbsp;\n *\n * **Basic Parameters:** all params not described here are derived from [Dialog], check it out for more details\n *\n * @param value the selected number\n * @param label the optional label of the input field\n\n * @param inputPlaceholder a placeholder if the input is empty\n * @param singleLine if true, the input field will only allow a single line\n * @param maxLines the max lines for the input field\n * @param minLines the min lines for the input field\n * @param enabled if true, the input field is enabled\n * @param clearable if true, the input field can be cleared by a trailing clear icon\n * @param prefix the prefix for the input field\n * @param suffix the prefix for the input field\n * @param textStyle the [TextStyle] for the input field\n * @param validator the [DialogInputValidator] for the input field - use [rememberDialogInputValidator]\n * @param requestFocus if true, the input field will request the focus when the dialog si shown (and open the keyboard)\n * @param selectionState if initial selection state ([DialogInput.SelectionState]) of the input field\n * @param onValueStateChanged an optional callback that will be called whenever the value of the input field changes\n */\n@Composable\nfun &lt;T : Number&gt; DialogInputNumber(\n    // Base Dialog - State\n    state: DialogState,\n    // Custom - Required\n    value: MutableState&lt;T&gt;,\n    label: String = \"\",\n    // Custom - Optional\n    inputPlaceholder: String = \"\",\n    singleLine: Boolean = false,\n    maxLines: Int = if (singleLine) 1 else Int.MAX_VALUE,\n    minLines: Int = 1,\n    enabled: Boolean = true,\n    clearable: Boolean = true,\n    prefix: String = \"\",\n    suffix: String = \"\",\n    validator: DialogInputValidator = DialogInputNumber.rememberDefaultValidator(value.value),\n    textStyle: TextStyle = LocalTextStyle.current,\n    requestFocus: Boolean = false,\n    selectionState: DialogInput.SelectionState = DialogInput.SelectionState.Default,\n    onValueStateChanged: (valid: Boolean, value: T?) -&gt; Unit = { _, _ -&gt; },\n    // Base Dialog - Optional\n    title: (@Composable () -&gt; Unit)? = null,\n    icon: (@Composable () -&gt; Unit)? = null,\n    style: ComposeDialogStyle = DialogDefaults.defaultDialogStyle(),\n    buttons: DialogButtons = DialogDefaults.buttons(),\n    options: DialogOptions = DialogDefaults.options(),\n    onEvent: (event: DialogEvent) -&gt; Unit = {}\n)\n</code></pre>"},{"location":"modules/dialog-input/#screenshots","title":"Screenshots","text":""},{"location":"modules/dialog-list/","title":"dialog-list","text":"<p>This shows a dialog with a list of items. Rendering, selection mode and more is adjustable.</p> <p>Check out the composable and it's documentation in the code snipplet below.</p> <p>Generally following can be adjusted:</p> <ul> <li>list of items or loading list items asynchronously</li> <li>single selection / multi selection / clickable</li> <li>optional dividers</li> <li>filter and search functionality</li> <li>custom items</li> </ul>"},{"location":"modules/dialog-list/#example","title":"Example","text":"<pre><code>val state = rememberDialogState()\nval selected = remember { mutableStateOf&lt;Int?&gt;(null) }\nval items = List(100) { \"Item $it\" }\nDialogList(\n    style = style,\n    title = { Text(\"List Dialog\") },\n    icon = getIcon,\n    buttons = buttons,\n    description = \"Some optional description\",\n    state = state,\n    items = items,\n    itemIdProvider = { items.indexOf(it) },\n    selectionMode = DialogList.SelectionMode.SingleSelect(\n        selected = selected,\n        selectOnRadioButtonClickOnly = false\n    ),\n    itemContents = DialogList.ItemDefaultContent(\n        text = { it }\n    ),\n    onEvent = {\n        val info = if (it is DialogEvent.Button &amp;&amp; it.button == DialogButtonType.Positive) {\n            \"Selected list value: ${selected.value?.let { \"Index = $it | Item = ${items[it]}\" }}\"\n        } else {\n            \"Event $it\"\n        }\n        // ...\n    }\n)\n</code></pre>"},{"location":"modules/dialog-list/#composable","title":"Composable","text":"<p>There are 2 ways to show a list, one by providing a list of items and one by providing an asynchronous item loader function.</p> ListLoader <pre><code>/**\n * Shows a dialog with a list and an optional filter option\n *\n * consider the overload with a lambda for the items parameter if items should be loaded lazily\n *\n * &amp;nbsp;\n *\n * **Basic Parameters:** all params not described here are derived from [Dialog], check it out for more details\n *\n * @param items the list items\n * @param itemIdProvider the items to id lambda that is used to store selected item ids\n * @param itemContents the [DialogList.ItemContents] holding composables to customise the rendering of the list items - use [DialogList.ItemDefaultContent] or [DialogList.ItemContents] if you want to completely customise the items\n * @param selectionMode the [DialogList.SelectionMode]\n * @param divider if true, a divider is shown between the list items\n * @param description a custom text that will be shown as description at the top of the dialog\n * @param filter the [DialogList.Filter] - if it is null, filtering is disabled\n */\n@Composable\nfun &lt;T&gt; DialogList(\n    state: DialogState,\n    // Custom - Required\n    items: List&lt;T&gt;,\n    itemIdProvider: (item: T) -&gt; Int,\n    itemContents: DialogList.ItemContents&lt;T&gt;,\n    selectionMode: DialogList.SelectionMode&lt;T&gt;,\n    // Custom - Optional\n    divider: Boolean = false,\n    description: String = \"\",\n    filter: DialogList.Filter&lt;T&gt;? = null,\n    // Base Dialog - Optional\n    title: (@Composable () -&gt; Unit)? = null,\n    icon: (@Composable () -&gt; Unit)? = null,\n    style: ComposeDialogStyle = DialogDefaults.defaultDialogStyle(),\n    buttons: DialogButtons = DialogDefaults.buttons(),\n    options: DialogOptions = DialogDefaults.options(),\n    onEvent: (event: DialogEvent) -&gt; Unit = {}\n)\n</code></pre> <pre><code>/**\n * Shows a dialog with a list and an optional filter option\n *\n * consider the overload with a list if the items are just a simple list of items\n *\n * &amp;nbsp;\n *\n * **Basic Parameters:** all params not described here are derived from [Dialog], check it out for more details\n *\n * @param itemsLoader the lambda that will return the items for this dialog\n * @param itemIdProvider the items to id lambda that is used to store selected item ids\n * @param itemContents the [DialogList.ItemContents] holding composables to customise the rendering of the list items - use [DialogList.ItemDefaultContent] or [DialogList.ItemContents] if you want to completely customise the items\n * @param selectionMode the [DialogList.SelectionMode]\n * @param itemSaver the saver for the list items - if no itemSaver is provided, data won't be remembered as saveable and will be reloaded on recomposition (e.g. screen rotation)\n * @param loadingIndicator the composable that will be shown while items are loaded\n * @param divider if true, a divider is shown between the list items\n * @param description a custom text that will be shown as description at the top of the dialog\n * @param filter the [DialogList.Filter] - if it is null, filtering is disabled\n */\n@Composable\nfun &lt;T&gt; DialogList(\n    state: DialogState,\n    // Custom - Required\n    itemsLoader: suspend () -&gt; List&lt;T&gt;,\n    itemIdProvider: (item: T) -&gt; Int,\n    itemContents: DialogList.ItemContents&lt;T&gt;,\n    selectionMode: DialogList.SelectionMode&lt;T&gt;,\n    // Custom - Optional\n    itemSaver: Saver&lt;MutableState&lt;List&lt;T&gt;&gt;, out Any&gt;? = null,\n    loadingIndicator: @Composable () -&gt; Unit = {\n        Box(modifier = Modifier.fillMaxWidth(), contentAlignment = Alignment.Center) {\n            CircularProgressIndicator()\n        }\n    },\n    divider: Boolean = false,\n    description: String = \"\",\n    filter: DialogList.Filter&lt;T&gt;? = null,\n    // Base Dialog - Optional\n    title: (@Composable () -&gt; Unit)? = null,\n    icon: (@Composable () -&gt; Unit)? = null,\n    style: ComposeDialogStyle = DialogDefaults.defaultDialogStyle(),\n    buttons: DialogButtons = DialogDefaults.buttons(),\n    options: DialogOptions = DialogDefaults.options(),\n    onEvent: (event: DialogEvent) -&gt; Unit = {}\n)\n</code></pre>"},{"location":"modules/dialog-list/#screenshots","title":"Screenshots","text":""},{"location":"modules/dialog-menu/","title":"dialog-menu","text":"<p>This shows a menu dialog that even supports unlimited nesting levels.</p> <p>Check out the composable and it's documentation in the code snipplet below.</p> <p>Generally following can be adjusted:</p> <ul> <li>menu items with optional icons</li> <li>unlimited level of nesting</li> <li>also supports divider items and custom items</li> </ul>"},{"location":"modules/dialog-menu/#example","title":"Example","text":"<pre><code>DialogMenu(\n    style = style,\n    title = { Text(\"Menu Dialog\") },\n    icon = icon,\n    items = items,\n    state = state\n)\n</code></pre> <p>Here's a full example of a menu that can be rendered:</p> <pre><code>val items = listOf(\n    MenuItem.Item(\n        title = \"Item 1\",\n        description = \"Description 1\",\n        icon = { Icon(Icons.Default.Info, null) }) {\n        showInfo(\"Item 1 clicked\")\n    },\n    MenuItem.Item(\n        title = \"Item 2\",\n        description = \"Description 2\",\n        icon = { Icon(Icons.Default.Info, null) }) {\n        showInfo(\"Item 2 clicked\")\n    },\n    MenuItem.Divider,\n    MenuItem.SubMenu(\n        title = \"Sub Menu 1\",\n        description = \"Description\",\n        icon = { Icon(Icons.Default.Info, null) },\n        items = listOf(\n            MenuItem.Item(\n                title = \"Sub Item 1\",\n                description = \"Description 1\",\n                icon = { Icon(Icons.Default.Info, null) }) {\n                showInfo(\"Sub Item 1 clicked\")\n            },\n            MenuItem.Item(\n                title = \"Sub Item 2\",\n                description = \"Description 2\",\n                icon = { Icon(Icons.Default.Info, null) }) {\n                showInfo(\"Sub Item 2 clicked\")\n            },\n            MenuItem.Region(\n                \"Region X\"\n            ),\n            MenuItem.Item(\n                title = \"Sub Item 3\",\n                description = \"Description 3\",\n                icon = { Icon(Icons.Default.Info, null) }) {\n                showInfo(\"Sub Item 3 clicked\")\n            },\n            MenuItem.SubMenu(\n                title = \"Sub Sub Menu 4\",\n                description = \"Description\",\n                icon = { Icon(Icons.Default.Info, null) },\n                items = listOf(\n                    MenuItem.Item(\n                        title = \"Sub Sub Item 1\",\n                        description = \"Description\",\n                        icon = { Icon(Icons.Default.Info, null) }) {\n                        showInfo(\"Sub Sub Item 1 clicked\")\n                    },\n                    MenuItem.Item(\n                        title = \"Sub Sub Item 2\",\n                        description = \"Description\",\n                        icon = { Icon(Icons.Default.Info, null) }) {\n                        showInfo(\"Sub Sub Item 2 clicked\")\n                    },\n                    MenuItem.Item(\n                        title = \"Sub Sub Item 3\",\n                        description = \"Description\",\n                        icon = { Icon(Icons.Default.Info, null) }) {\n                        showInfo(\"Sub Sub Item 3 clicked\")\n                    },\n                    MenuItem.Item(\n                        title = \"Sub Sub Item 4\",\n                        description = \"Description\",\n                        icon = { Icon(Icons.Default.Info, null) }) {\n                        showInfo(\"Sub Sub Item 4 clicked\")\n                    },\n                    MenuItem.Item(\n                        title = \"Sub Sub Item 5\",\n                        description = \"Description\",\n                        icon = { Icon(Icons.Default.Info, null) }) {\n                        showInfo(\"Sub Sub Item 5 clicked\")\n                    },\n                    MenuItem.Item(\n                        title = \"Sub Sub Item 6\",\n                        description = \"Description\",\n                        icon = { Icon(Icons.Default.Info, null) }) {\n                        showInfo(\"Sub Sub Item 6 clicked\")\n                    },\n                    MenuItem.Item(\n                        title = \"Sub Sub Item 7\",\n                        description = \"Description\",\n                        icon = { Icon(Icons.Default.Info, null) }) {\n                        showInfo(\"Sub Sub Item 7 clicked\")\n                    },\n                )\n            )\n        )\n    ),\n    //MenuItem.Custom {\n    //    Text(\"Custom Content\", color = Color.Red)\n    //}\n)\n</code></pre>"},{"location":"modules/dialog-menu/#composable","title":"Composable","text":"<pre><code>/**\n * Shows a dialog holdinh a list of menu items\n *\n * &amp;nbsp;\n *\n * **Basic Parameters:** all params not described here are derived from [Dialog], check it out for more details\n *\n * @param items a list of menu items\n */\n@OptIn(ExperimentalComposeUiApi::class)\n@Composable\nfun DialogMenu(\n    state: DialogState,\n    // Custom - Required\n    items: List&lt;MenuItem&gt;,\n    // Base Dialog - Optional\n    title: (@Composable () -&gt; Unit)? = null,\n    icon: (@Composable () -&gt; Unit)? = null,\n    style: ComposeDialogStyle = DialogDefaults.defaultDialogStyle(),\n    buttons: DialogButtons = DialogButtons.DISABLED,\n    options: DialogOptions = DialogDefaults.options(),\n    onEvent: (event: DialogEvent) -&gt; Unit = {},\n)\n</code></pre>"},{"location":"modules/dialog-menu/#screenshots","title":"Screenshots","text":""},{"location":"modules/dialog-number/","title":"dialog-number","text":"<p>This shows a number picker dialog. You can always use the <code>InputDialog</code> for numbers as well and change its options to accept numbers only and even attach a validator. But this one is meant for picking numbers with the help of one or two increase and decrease buttons.</p> <p>Check out the composable and it's documentation in the code snipplet below.</p> <p>Generally following can be adjusted:</p> <ul> <li>min/max/step values</li> <li>custom formatter</li> </ul>"},{"location":"modules/dialog-number/#example","title":"Example","text":"<pre><code>// would work with Int, Long, Double and Float (all options of Number!)\nval number = 5\nval state = rememberDialogState()\nif (state.visible) {\n\n    // special state for input dialog\n    val value = rememberDialogNumber(number)\n\n    // number dialog\n    DialogNumberPicker(\n        state = state,\n        title = { Text(\"Integer Picker Dialog\") },\n        value = value,\n        icon = icon,\n        style = style,\n        onEvent = {\n            if (it is DialogEvent.Button &amp;&amp; it.button == DialogButtonType.Positive) {\n                // we should probably handle the input value in this case\n                showInfo(\"Submitted Input: ${value.value}\")\n            } else {\n                showInfo(\"Event $it\")\n            }\n        },\n        setup = NumberPickerSetup(\n            min = 0, max = 100, stepSize = 5\n        )\n    )\n}\n</code></pre>"},{"location":"modules/dialog-number/#composable","title":"Composable","text":"<pre><code>/**\n * Shows a dialog with a number picker\n *\n * &amp;nbsp;\n *\n * **Basic Parameters:** all params not described here are derived from [Dialog], check it out for more details\n *\n * @param value the number state for this dialog\n * @param setup the [NumberPickerSetup]\n * @param iconDown the icon for the decrease button\n * @param iconUp the icon for the increase button\n * @param formatter the formatter for the text of this picker\n * @param textStyle the [TextStyle] for the text of this picker\n * @param onValueStateChanged a callback that will be called whenever the value of the number picker changes\n */\n@Composable\nfun &lt;T : Number&gt; DialogNumberPicker(\n    // Base Dialog - State\n    state: DialogState,\n    // Custom - Required\n    value: MutableState&lt;T&gt;,\n    setup: NumberPickerSetup&lt;T&gt;,\n    iconDown: @Composable () -&gt; Unit = {\n        Icon(imageVector = Icons.AutoMirrored.Filled.KeyboardArrowLeft, contentDescription = null)\n    },\n    iconUp: @Composable () -&gt; Unit = {\n        Icon(imageVector = Icons.AutoMirrored.Filled.KeyboardArrowRight, contentDescription = null)\n    },\n    iconDown2: @Composable () -&gt; Unit = {\n        Icon(imageVector = Icons.Default.KeyboardDoubleArrowLeft, contentDescription = null)\n    },\n    iconUp2: @Composable () -&gt; Unit = {\n        Icon(imageVector = Icons.Default.KeyboardDoubleArrowRight, contentDescription = null)\n    },\n    formatter: (value: T) -&gt; String = { it.toString() },\n    // Custom - Optional\n    textStyle: TextStyle = MaterialTheme.typography.bodyMedium,\n    onValueStateChanged: (value: T) -&gt; Unit = { },\n    // Base Dialog - Optional\n    title: (@Composable () -&gt; Unit)? = null,\n    icon: (@Composable () -&gt; Unit)? = null,\n    style: ComposeDialogStyle = DialogDefaults.defaultDialogStyle(),\n    buttons: DialogButtons = DialogDefaults.buttons(),\n    options: DialogOptions = DialogDefaults.options(),\n    onEvent: (event: DialogEvent) -&gt; Unit = {}\n)\n</code></pre>"},{"location":"modules/dialog-number/#screenshots","title":"Screenshots","text":""},{"location":"modules/dialog-progress/","title":"dialog-progress","text":"<p>This shows a simple loading dialog with a progress indicator.</p> <p>Check out the composable and it's documentation in the code snipplet below.</p> <p>Generally following can be adjusted:</p> <ul> <li>circular or linear progress</li> </ul>"},{"location":"modules/dialog-progress/#example","title":"Example","text":"<pre><code>if (state.visible) {\n    DialogProgress(\n        state = state,\n        content = {\n            Text(\"Working...\")\n        },\n        progressStyle = DialogProgress.Style.Indeterminate(linear = false),\n        icon = icon,\n        title = { Text(\"Progress Dialog\") },\n        buttons = DialogDefaults.buttons(\n            positive = DialogButton(\"Stop\")\n        ),\n        style = style,\n        onEvent = {\n            if (it is DialogEvent.Button &amp;&amp; it.button == DialogButtonType.Positive) {\n                showInfo(\"Progress Dialog closed by button\")\n            } else {\n                showInfo(\"Event $it\")\n            }\n        }\n    )\n}\n</code></pre>"},{"location":"modules/dialog-progress/#composable","title":"Composable","text":"<pre><code>/**\n * Shows a dialog with an optional label and a progress indicator\n *\n * &amp;nbsp;\n *\n * **Basic Parameters:** all params not described here are derived from [Dialog], check it out for more details\n *\n * @param content the content of the progress\n * @param progressStyle the style of the progress indicator ([DialogProgress.Style])\n */\n@Composable\nfun DialogProgress(\n    state: DialogState,\n    // Custom - Required\n    // ...\n    // Custom - Optional\n    content: (@Composable ColumnScope.() -&gt; Unit)? = null,\n    progressStyle: DialogProgress.Style = DialogProgress.Style.Indeterminate(),\n    // Base Dialog - Optional\n    title: (@Composable () -&gt; Unit)? = null,\n    icon: (@Composable () -&gt; Unit)? = null,\n    style: ComposeDialogStyle = DialogDefaults.defaultDialogStyle(),\n    buttons: DialogButtons = DialogDefaults.buttons(),\n    options: DialogOptions = DialogDefaults.options(),\n    onEvent: (event: DialogEvent) -&gt; Unit = {}\n)\n</code></pre>"},{"location":"modules/dialog-progress/#screenshots","title":"Screenshots","text":""},{"location":"modules/dialog-time/","title":"dialog-time","text":"<p>This shows a time selector dialog. 24h mode is optional.</p> <p>Check out the composable and it's documentation in the code snipplet below.</p> <p>Generally following can be adjusted:</p> <ul> <li>12h/24h mode</li> </ul>"},{"location":"modules/dialog-time/#example","title":"Example","text":"<pre><code>if (state.visible) {\n\n    // special state for time dialog\n    val time = rememberDialogTime()\n    // optional settings\n    val setup = DialogTimeDefaults.setup(is24Hours = is24Hours)\n\n    DialogTime(\n        state = state,\n        time = time,\n        setup = setup,\n        icon = icon,\n        title = { Text(\"Select Time\") },\n        style = style,\n        onEvent = {\n            if (it is DialogEvent.Button &amp;&amp; it.button == DialogButtonType.Positive) {\n                showInfo(\"Selected Time: ${time.value}\")\n            } else {\n                showInfo(\"Event $it\")\n            }\n        }\n    )\n}\n</code></pre>"},{"location":"modules/dialog-time/#composable","title":"Composable","text":"<pre><code>/**\n * Shows a dialog with a time input\n *\n * &amp;nbsp;\n *\n * **Basic Parameters:** all params not described here are derived from [Dialog], check it out for more details\n *\n * @param time the selected time\n * @param setup the [DialogTime.Setup] - use [DialogTimeDefaults.setup] to provide your own data\n */\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun DialogTime(\n    state: DialogState,\n    // Custom - Required\n    time: MutableState&lt;LocalTime&gt;,\n    // Custom - Optional\n    setup: DialogTime.Setup = DialogTimeDefaults.setup(),\n    // Base Dialog - Optional\n    title: (@Composable () -&gt; Unit)? = null,\n    icon: (@Composable () -&gt; Unit)? = null,\n    style: ComposeDialogStyle = DialogDefaults.defaultDialogStyle(),\n    buttons: DialogButtons = DialogDefaults.buttons(),\n    options: DialogOptions = DialogDefaults.options(),\n    onEvent: (event: DialogEvent) -&gt; Unit = {}\n)\n</code></pre>"},{"location":"modules/dialog-time/#screenshots","title":"Screenshots","text":""}]}